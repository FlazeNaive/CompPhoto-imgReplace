import numpy as np
import cv2

def replaceTile(canvas, tile):
    """
    function for replacing the tile generated by diffvg
    the tile is a rotatable rectangle

    canvas: the image to paint
    tile: shape(x, y), transform(delta_x, delta_y), rotate(theta), fill(color) 
    """

    # get the tile information
    x, y = tile.shape
    delta_x, delta_y = tile.transform
    theta = tile.rotate
    # theta is the rotating angle, centered at the left-top corner of the canvas
    color = tile.fill

    # get the tile center
    center_x = x // 2
    center_y = y // 2

    # get the tile rotation matrix
    rotation_matrix = np.array([[np.cos(theta), -np.sin(theta)], [np.sin(theta), np.cos(theta)]])

    # get the tile vertices
    vertices = np.array([[-center_x, -center_y], [center_x, -center_y], [center_x, center_y], [-center_x, center_y]])

    # rotate the tile vertices
    rotated_vertices = np.dot(vertices, rotation_matrix)

    # get the tile vertices in the canvas
    canvas_vertices = rotated_vertices + np.array([delta_x, delta_y])

    # get the tile vertices in the canvas
    canvas_vertices = np.round(canvas_vertices).astype(np.int32)

    # get the tile vertices in the canvas
    canvas_vertices = np.clip(canvas_vertices, 0, canvas.shape[0] - 1)

    # get the tile vertices in the canvas
    canvas_vertices = canvas_vertices.reshape((-1, 1, 2))

    # paint the tile
    cv2.fillPoly(canvas, [canvas_vertices], color)

class Tile:
    """
    class for storing the tile information
    """
    def __init__(self, shape, transform, rotate, fill):
        self.shape = shape
        self.transform = transform
        self.rotate = rotate
        self.fill = fill

# test function replaceTile
if __name__ == "__main__":
    # create a canvas
    canvas = np.zeros((500, 500, 3), dtype=np.uint8)

    # create a tile
    tile = Tile((100, 100), (100, 100), 90, (255, 0, 0))

    # replace the tile
    replaceTile(canvas, tile)

    # show the canvas
    # cv2.imshow("canvas", canvas)
    # cv2.waitKey(0)
    # cv2.destroyAllWindows()

    cv2.imwrite("canvas.png", canvas)